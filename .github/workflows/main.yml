on:
  pull_request:
  push:
    branches: [ master ]

jobs:
  verilog-test:
    runs-on: ubuntu-22.04
    container:
      image: barabas5532/crush-ci:3
    strategy:
      matrix:
        target:
          - sim_inst_immediate_decode
          - sim_memory
          - sim_alu
          - sim_load_store
          - sim_top
          # sim_cpu is not a testbench, but a target for RISCOF testing, so it
          # is not included here
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up python environment
        run: |
          apt-get install -y python3-venv
          python -m venv .venv
          . .venv/bin/activate
          python -m pip install -r requirements.txt
          # Every step runs in its own shell. Activating the venv really just
          # modifies the path. Persist the modified path, so that other steps
          # also use the venv.
          echo PATH=$PATH >> $GITHUB_ENV
      - name: Run test
        timeout-minutes: 1
        run: |
          . script/init.sh
          fusesoc run --target ${{ matrix.target }} --resolve-env-vars-early crush
  verilog-lint:
    runs-on: ubuntu-22.04
    container:
      image: barabas5532/crush-ci:3
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up python environment
        run: |
          apt-get install -y python3-venv
          python -m venv .venv
          . .venv/bin/activate
          python -m pip install -r requirements.txt
          # Every step runs in its own shell. Activating the venv really just
          # modifies the path. Persist the modified path, so that other steps
          # also use the venv.
          echo PATH=$PATH >> $GITHUB_ENV
      - name: Run lint
        run: |
          . script/init.sh
          fusesoc run --target lint --resolve-env-vars-early crush
  riscof-test:
    runs-on: ubuntu-22.04
    container:
      image: barabas5532/crush-ci:3
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up python environment
        run: |
          apt-get install -y python3-venv
          python -m venv .venv
          . .venv/bin/activate
          python -m pip install -r requirements.txt
          # Every step runs in its own shell. Activating the venv really just
          # modifies the path. Persist the modified path, so that other steps
          # also use the venv.
          echo PATH=$PATH >> $GITHUB_ENV
      - name: Run RISCOF
        timeout-minutes: 5
        run: |
          . script/init.sh
          script/compliance.sh
  synthesis:
    runs-on: ubuntu-22.04
    container:
      image: barabas5532/crush-ci:3
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up python environment
        run: |
          apt-get install -y python3-venv
          python -m venv .venv
          . .venv/bin/activate
          python -m pip install -r requirements.txt
          # Every step runs in its own shell. Activating the venv really just
          # modifies the path. Persist the modified path, so that other steps
          # also use the venv.
          echo PATH=$PATH >> $GITHUB_ENV
      - name: Run synthesis
        timeout-minutes: 1
        run: |
          . script/init.sh
          fusesoc --verbose run crush
  firmware:
    runs-on: ubuntu-22.04
    container:
      image: barabas5532/crush-ci:3
    defaults:
      run:
        working-directory: fw
    steps:
      - uses: actions/checkout@v4
      - name: Configure
        run: cmake -B build -G Ninja -DCMAKE_TOOLCHAIN_FILE=TC-crush.cmake
      - name: Build
        run: cmake --build build
      - uses: actions/upload-artifact@v4
        with:
          name: firmware-elf
          path: |
            fw/build/crush-blinky
            fw/build/crush-blinky.bin
            fw/build/crush-blinky.data
